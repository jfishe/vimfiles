" ================ Windows & Defaults ================== {{{
" Get the defaults that most users want.
source $VIMRUNTIME/defaults.vim
source $VIMRUNTIME/mswin.vim

" if has('win64')
"     set shell=powershell
"     set shellcmdflag=-command
"     set shellquote=\"
"     set shellxquote= 
" endif

set fileformat=unix     "LF EOL only
"set fileformats-=dos   "Force LF EOL only on all; won't handle dos
"files gracefully
set visualbell          "No sounds

"Turn off keep backup files unless write fails
set writebackup
set nobackup

" LocalLeader
let g:maplocalleader = ','
" }}}
" ================ Statusline ================== {{{
set statusline=%<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
" }}}
" ================ Persistent Undo ================== {{{
" Keep undo history across sessions, by storing in file.
" Only works all the time.
" Assumes vimrc is in .vim or vimfiles and not in $HOME
let s:vimfiles=fnamemodify(expand('$MYVIMRC'), ':p:h')

" Based on https://begriffs.com/posts/2019-07-19-history-use-vim.html
if has('persistent_undo') && !isdirectory(s:vimfiles . '/undo')
    if has('win32') || has('win64') 
        silent exe '!mkdir ' . s:vimfiles . '\undo'
    else
        silent exe '!mkdir ' . s:vimfiles . '/undo'
    endif
endif

if has('persistent_undo')
    let &undodir=s:vimfiles . '/undo//,' . &undodir
    set undofile
endif

set undolevels=500
" }}}
" Cache tags instead of polluting project directories {{{
if !isdirectory(s:vimfiles . '/gutentags')
    if has('win32') || has('win64') 
        silent exe '!mkdir ' . s:vimfiles . '\gutentags'
    else
        silent exe '!mkdir ' . s:vimfiles . '/gutentags'
    endif
endif
let g:gutentags_cache_dir=s:vimfiles . '/gutentags'

" Required by vim-fugitive
" Fugitive .git/tags support removed in favor of `:set tags^=./.git/tags;`
set tags^=./.git/tags;

" Cache swapfile instead of polluting project directories
if !isdirectory(s:vimfiles . '/swap')
    if has('win32') || has('win64') 
        silent exe '!mkdir ' . s:vimfiles . '\swap'
    else
        silent exe '!mkdir ' . s:vimfiles . '/swap'
    endif
endif
let &directory=s:vimfiles . '/swap//,' . &directory
" }}}

" Thesaurus and Dictionary {{{
" Thesaurus from http://www.gutenberg.org/files/3202/files.zip
" Extract files from zip and put in the following location.
if isdirectory(s:vimfiles . '/thesaurus')
    let &thesaurus = s:vimfiles . '/thesaurus/mthesaur.txt'
endif

if isdirectory(s:vimfiles . '/dictionary')
    let &dictionary = s:vimfiles . '/dictionary/words,' . &dictionary
endif
" sudo apt-get install wamerican-huge
if filereadable('/usr/share/dict/words')
    let &dictionary = '/usr/share/dict/words,' . &dictionary
endif
" }}}

" The matchit plugin {{{
" makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if has('syntax') && has('eval')
    packadd! matchit
endif
" }}}
" ================ Python 3 ====================== {{{
" if !empty($CONDA_PREFIX) && (has('win32') || has('win64'))
if !empty($CONDA_PREFIX) && has('python3_dynamic')
    set pythonthreehome=$CONDA_PREFIX
endif
if has('python3')
    packadd! ultisnips
    packadd! vim-pydocstring
    packadd! vim-snippets
endif
" }}}
" ================ Indentation ====================== {{{
" Commented lines relocated to sensible.vim

"set autoindent
" set autochdir  " change directory to the file in the current
set smartindent
"set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set nowrap
"set backspace=indent,eol,start " Proper backspace behavior.
" }}}
" ================ Buffers ====================== {{{
" Commented lines relocated to sensible.vim

set hidden                     " Possibility to have more than one
" unsaved buffers.
"set ruler                      " Shows the current line number at the bottom.
" right of the screen.
set switchbuf+=split
set switchbuf+=useopen
augroup mybuffers
    autocmd!
    autocmd VimResized * wincmd =
augroup END
set nofoldenable
set foldcolumn=1
set mouse=n
" }}}
" Display tabs and trailing spaces visually {{{
if has('multi_byte')
    if &termencoding ==? ''
        let &termencoding = &encoding
    endif
    set encoding=utf-8
    scriptencoding utf-8
    setglobal fileencoding=utf-8
    "setglobal bomb
    set fileencodings=ucs-bom,utf-8,latin1
    set list listchars=tab:\ \ ,trail:Â»
else
    set list listchars=tab:\ \ ,trail:$
endif
" }}}
" Color and background {{{
set background=light
"colorscheme solarized
" let g:solarized_extra_hi_groups=1
" let g:solarized_use16=1
set termguicolors
colorscheme solarized8
" }}}
" ================ Jump ============================= {{{
set relativenumber
" }}}
" ================ Completion ======================= {{{
set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
" }}}
" ================ Scrolling ======================== {{{
set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1
" }}}
" ================ Search =========================== {{{
" Commented lines relocated to sensible.vim
"set incsearch       " Find the next match as we type the search
if &t_Co > 2 || has('gui_running')
    " Switch on highlighting the last used search pattern.
    set hlsearch
endif
set ignorecase      " Ignore case when searching...
set infercase       " Smarter completions
set smartcase       " ...unless we type a capital
" }}}
" ================ Terminal =========================== {{{
" Settings for Vim 8.1 terminal command
" Append bash to select terminal.
command! Vterm vertical terminal
command! Vposh vertical terminal powershell -ExecutionPolicy Bypass
" }}}
" ================ My Functions & Commands ============ {{{
"Get listing of map assignments
function! MyMaps()
    redir @"
    silent verbose map!
    redir END
    new
    put!
    set nomodified
endfunction

" }}}
" diff options {{{
set diffopt+=vertical
set diffopt+=algorithm:patience
" }}}
