" ================ packadd! ====================== {{{
" defaults.vim invokes `filetype plugin indent on` after packadd! lines.

" The matchit plugin {{{
" makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
if !has('nvim') && has('syntax') && has('eval')
  packadd! matchit
endif
" }}}
" ================ Python 3 ====================== {{{
if !has('nvim') && !empty($CONDA_PREFIX) && has('python3_dynamic')
  " Do not depend on stacked environment. Both should work:
  " Enter-CondaEnvironment -Name vim_python &&
  "   Enter-CondaEnvironment -Stack -Name venv
  " Enter-CondaEnvironment -Name vim_python
  let s:conda_env = '/miniforge3/envs/vim-python'
  if isdirectory(expand("$LOCALAPPDATA" .. s:conda_env))
    let &pythonthreehome = expand("$LOCALAPPDATA" .. s:conda_env)
  elseif isdirectory(expand("$HOME" .. s:conda_env))
    let &pythonthreehome = expand("$HOME" .. s:conda_env)
  endif
  if has('linux')
    let &pythonthreedll=expand(&pythonthreehome .. "/lib/libpython3.so")
  endif
endif
if has('python3')
  try
    packadd! panvimwiki
    catch /E919: Directory not found in 'packpath'/
  endtry
  packadd! ultisnips
  packadd! vim-pydocstring
  packadd! vim-snippets
  packadd! vimtex
endif
" }}}
" ================ Taskwarrior ====================== {{{
if executable('task')
  packadd! tagbar
  packadd! taskwiki
  packadd! vim-plugin-AnsiEsc
  packadd! vim-taskwarrior
endif
" }}}
" }}}

" ================ Windows & Defaults ================== {{{
" Get the defaults that most users want.
" defaults.vim invokes `filetype plugin indent on` after packadd! lines.
if !has('nvim')
  source $VIMRUNTIME/defaults.vim
else
  command DiffOrig vert new | set buftype=nofile | read ++edit # | 0d_
        \ | diffthis | wincmd p | diffthis
endif

" if has('win64')
"     set shell=powershell
"     set shellcmdflag=-command
"     set shellquote=\"
"     set shellxquote= 
" endif

" Managed by EditorConfig
  " set fileformat=unix     "LF EOL only
" set fileformats-=dos   "Force LF EOL only on all; won't handle dos
" files gracefully
set visualbell          "No sounds

"Turn off keep backup files unless write fails
set writebackup
set nobackup

if exists('$WSL_DISTRO_NAME')
  let g:netrw_browsex_viewer = 'wslview'
endif
" }}}
" ================ Statusline ================== {{{
set statusline=\ %<%f\ %h%m%r%{FugitiveStatusline()}%=%-14.(%l,%c%V%)\ %P
" }}}
" ================ Persistent Undo ================== {{{
" Keep undo history across sessions, by storing in file.
" Only works all the time.
" Assumes vimrc is in .vim or vimfiles and not in $HOME
let s:vimfiles=fnamemodify(expand('$MYVIMRC'), ':p:h')

" Based on https://begriffs.com/posts/2019-07-19-history-use-vim.html
if !has('nvim') && has('persistent_undo') && !isdirectory(s:vimfiles . '/undo')
  if has('win32') || has('win64') 
    silent exe '!mkdir ' . s:vimfiles . '\undo'
  else
    silent exe '!mkdir ' . s:vimfiles . '/undo'
  endif
endif

if !has('nvim') && has('persistent_undo')
  let &undodir=s:vimfiles . '/undo//,' . &undodir
endif
if has('nvim') || has('persistent_undo')
  set undofile
endif

set undolevels=500
" }}}

" Cache swapfile instead of polluting project directories {{{
if !has('nvim') && !isdirectory(s:vimfiles . '/swap')
  if has('win32') || has('win64') 
    silent exe '!mkdir ' . s:vimfiles . '\swap'
  else
    silent exe '!mkdir ' . s:vimfiles . '/swap'
  endif
endif
if !has('nvim')
  let &directory=s:vimfiles . '/swap//,' . &directory
endif
" }}}

" Thesaurus and Dictionary {{{
" Thesaurus from http://www.gutenberg.org/files/3202/files.zip
" Extract files from zip and put in the following location.
if isdirectory(s:vimfiles . '/thesaurus')
  let &thesaurus = s:vimfiles . '/thesaurus/mthesaur.txt'
endif

if has('win32') || has('win64')
  let s:dictionary = s:vimfiles . '/dictionary/words'
  if filereadable(s:dictionary)
    let &dictionary = s:dictionary . ',' . &dictionary
  endif
elseif filereadable('/usr/share/dict/words')
  " sudo apt-get install wamerican-huge
  let &dictionary = '/usr/share/dict/words,' . &dictionary
endif
" }}}

" ================ Indentation ====================== {{{
" Commented lines relocated to plugins

" Managed by polyglot-vim-plugin
  " set autoindent
  " set smarttab
" Managed by keymap.vim
  " set backspace=indent,eol,start " Proper backspace behavior.
" Managed by EditorConfig:
  " set shiftwidth=4
  " set softtabstop=4
  " set tabstop=4
  " set expandtab
set smartindent
set nowrap
" }}}
" ================ Buffers ====================== {{{
" Commented lines relocated to sensible.vim
set hidden  " Possibility to have more than one unsaved buffers.
" set ruler  " Shows the current line number at the bottom right of the screen.
set switchbuf+=split
set switchbuf+=useopen
augroup mybuffers
  autocmd!
  autocmd VimResized * wincmd =
augroup END
set nofoldenable
set foldcolumn=1
set mouse=n
" }}}
" Display tabs and trailing spaces visually {{{
if has('multi_byte')
  if &termencoding ==? '' && !has('nvim')
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  scriptencoding utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
  set list listchars=tab:\ \ ,trail:Â»
else
  set list listchars=tab:\ \ ,trail:$
endif
" }}}
" Color and background {{{
" set background=light
set background=dark

if has('cursorshape')
  "Mode Settings
  " termcap-cursor-shape termcap-cursor-color

  if &term =~ 'xterm' || &term == 'win32'
    "Cursor settings:
    "  0 -> DECSCUSR (terminal default)
    "  1 -> blinking block
    "  2 -> solid block 
    "  3 -> blinking underscore
    "  4 -> solid underscore
    "  5 -> blinking vertical bar
    "  6 -> solid vertical bar
    let &t_SI ..= "\<Esc>[5 q" "SI = INSERT mode
    let &t_SR ..= "\<Esc>[3 q" "SR = REPLACE mode
    let &t_EI ..= "\<Esc>[0 q" "EI = NORMAL mode (ELSE)
    let &t_ti ..= "\e[1 q"     "ti = put terminal into termcap mode
    let &t_te ..= "\e[0 q"     "te = end of termcap mode
  endif

endif

"colorscheme solarized
" let g:solarized_extra_hi_groups=1
" let g:solarized_use16=1
if has('termguicolors')
  set termguicolors
endif
colorscheme solarized8
" }}}
" ================ Jump ============================= {{{
set relativenumber
" }}}
" ================ Completion ======================= {{{
set completeopt+=longest
if v:version < 900
  set completeopt+=noselect
  set wildmode=lastused,full
else
  set wildmode=noselect:lastused,full
  set wildoptions=pum,fuzzy  "enable ctrl-n and ctrl-p to scroll thru matches
endif
set wildmenu
set wildcharm=<C-Z>  "Start completion in search.

set wildignore=*.o,*.obj,*~  "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=Temp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.mypy_cache*

if exists('*wildtrigger')
  augroup cmdcomplete
    autocmd!
    autocmd CmdlineChanged : call wildtrigger()
    autocmd CmdlineChanged / call wildtrigger()
    autocmd CmdlineChanged ? call wildtrigger()
  augroup END
endif
" }}}
" ================ Scrolling ======================== {{{
set scrolloff=0
set sidescrolloff=15
set sidescroll=1
" }}}
" ================ Search =========================== {{{
" Commented lines relocated to sensible.vim
" set incsearch       " Find the next match as we type the search
if &t_Co > 2 || has('gui_running')
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif
set ignorecase      " Ignore case when searching...
set infercase       " Smarter completions
set smartcase       " ...unless we type a capital
" }}}
" ================ Terminal =========================== {{{
" Settings for Vim 8.1 terminal command
" Append bash to select terminal.
if has('terminal')
  command! Vterm vertical terminal
  command! Vpwsh vertical terminal pwsh -ExecutionPolicy Bypass
  command! Vposh vertical terminal powershell -ExecutionPolicy Bypass
endif
" }}}
" diff options {{{
set diffopt+=vertical
set diffopt+=algorithm:patience
" }}}
