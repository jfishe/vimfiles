[user]
	name = John D. Fisher
	email = jdfenw@gmail.com
    ; Set these in ~/.bash_profile or ~/.bashrc to overide:
    ; GIT_AUTHOR_NAME is the human-readable name in the “author” field.
    ; GIT_AUTHOR_EMAIL is the email for the “author” field.
    ; GIT_AUTHOR_DATE is the timestamp used for the “author” field.
    ; GIT_COMMITTER_NAME sets the human name for the “committer” field.
    ; GIT_COMMITTER_EMAIL is the email address for the “committer” field.
    ; GIT_COMMITTER_DATE is used for the timestamp in the “committer” field.
    ; EMAIL is the fallback email address in case the user.email configuration
    ; value isn’t set. If this isn’t set, Git falls back to the system user and
    ; host names.
[core]
	editor = vim
	eol = lf
	autocrlf = input
	attributesfile = ~/.gitattributes_global
[gui]
	displayuntracked = false
[push]
	default = simple
[log]
	decorate = auto
[filter "nbstrip_full"]
    clean = "jq --indent 1 \
                '(.cells[] | select(has(\"outputs\")) | .outputs) = []  \
                | (.cells[] | select(has(\"execution_count\")) | .execution_count) = null  \
                | .metadata = {\"language_info\": {\"name\": \"python\", \"pygments_lexer\": \"ipython3\"}} \
                | .cells[].metadata = {} \
                '"
    smudge = cat
    required = true
[diff "xlsxdiff"]
	command = git-diff-wrapper.sh
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\"
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
; [difftool "vimdiff"]
;     trustExitCode = true
;     cmd = vim -d \"$LOCAL\" \"$REMOTE\"
; [mergetool "vimdiff"]
;     trustExitCode = true
;     cmd = vim -d \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\" -c '$wincmd w' -c 'wincmd J'
[difftool "fugitive"]
    cmd = vim -c \"Gvdiff\" \"$REMOTE\"
[mergetool "fugitive"]
    ; cmd = vim -c \"Gmerge\" \"$MERGED\"
    cmd = vim -c \"Gmerge\" \"$REMOTE\"
[diff]
    ; tool = vimdiff3
    tool = fugitive
[difftool]
    trustExitCode = true
    ; https://vimways.org/2018/vim-and-git/
    prompt = false
[merge]
    ; tool = vimdiff3
    tool = fugitive
[mergetool]
	prompt = false
[color]
	ui = true
[commit]
    template = ~/.gitmessage.txt
    cleanup = strip
    verbose = true
[include]
	path = ~/Git/dotfiles/gitconfig
    ; gitconfig is installation specific. Put the actual path in the file when cloning dotfiles.
    ; [credential]
    ; 	helper = /mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-wincred.exe
[status]
	showUntrackedFiles = no
[init]
    templatedir = ~/.git_template
[alias]
	# list files which have changed since review_base
	files = !git diff --name-only $(git merge-base HEAD \"${review_base:-master}\")
	# Same as above, but with a diff stat instead of just names (better for interactive use)
	stat = !git diff --stat $(git merge-base HEAD \"${review_base:-master}\")
	# split-diff style review using vim-fugitive Gvdiff
	review = !$EDITOR -p $(git files) +\"tabdo Gvdiff ${review_base:-master}\" +\"let g:gitgutter_diff_base = '${review_base:-master}'\"
	reviewone = !$EDITOR -p +\"tabdo Gvdiff ${review_base:-master}\" +\"let g:gitgutter_diff_base = '${review_base:-master}'\"
	; reviewf = !$EDITOR -p $(git files | fzf -m --reverse --height 40%) +\"tabdo Gvdiff ${review_base:-master}\" +\"let g:gitgutter_diff_base = '${review_base:-master}'\"
	# For when the diff is too big to review with :Gvdiff
	diff-review = !git diff $(git merge-base --fork-point \"${review_base:-master}\")
	# Review by commit
	by-commit = !git log -p --reverse $(git merge-base --fork-point \"${review_base:-master}\")..HEAD
	# split-diff, using icdiff
	icdiff = --paginate difftool --tool icdiff
	# show the before, changes, and after for one tracked image
	diff-img = difftool --tool imgdiff
	# Show just the subject and body of a particular commit (default: HEAD)
	message = log -n1 --format=\"%s%n%n%b\"
	# Show a markdown-formatted summary of commits from {review_base:-master} until HEAD
	pr-summary = !git log --reverse --format=\"- **%s** (%h)%n%n%w(74,2,2)%b\" \"${review_base:-master}\"..HEAD
	# Get last commit authored by me
	my-last = log -n1 --format=\"%H\" --author=\"\\([jJ]ohn\\)\\|\\([jJ]ohn D.\\) [fF]isher\"
	root = rev-parse --show-toplevel
